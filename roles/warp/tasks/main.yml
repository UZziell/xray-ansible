---
- name: Check if WARP has been already activated
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: warp_initial_check
  failed_when: "'cloudflare' not in warp_initial_check.content|lower"
  ignore_errors: true

- name: Install Wireguard
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - wireguard
    - iptables
    # - resolvconf
    - jq
  when: warp_initial_check.failed

- name: Ensure /etc/wireguard directory exists
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: "0755"
  when: warp_initial_check.failed

- name: Get latest wgcf release from GitHub API
  ansible.builtin.uri:
    url: https://api.github.com/repos/ViRb3/wgcf/releases/latest
    return_content: true
    timeout: 60
  register: wgcf_latest_release
  when: warp_initial_check.failed
  ignore_errors: true

- name: Extract wgcf download url
  ansible.builtin.set_fact:
    wgcf_download_url: "{{ wgcf_latest_release.content | from_json | json_query(query) | first }}"
  vars:
    query: assets[?contains(name,'linux_amd64')].browser_download_url
  when: warp_initial_check.failed
  ignore_errors: true

- name: Download and install latest wgcf release
  ansible.builtin.get_url:
    url: "{{ wgcf_download_url }}"
    dest: /usr/bin/wgcf
    mode: a+x
    force: true
    timeout: 30
  register: wgcf_download_result
  when: warp_initial_check.failed
  ignore_errors: true

- name: Copy wgcf binary to /usr/bin/wgcf
  ansible.builtin.copy:
    src: files/wgcf
    dest: /usr/bin/wgcf
    mode: "0755"
  when: warp_initial_check.failed and (wgcf_latest_release is failed or wgcf_download_result is failed)

- name: Register with WARP
  ansible.builtin.command:
    cmd: /usr/bin/wgcf register --accept-tos
    chdir: /etc/wireguard
    creates: "{{ wgcf_account }}"
  when: warp_initial_check.failed

- name: Generate Wireguard config
  ansible.builtin.command:
    cmd: /usr/bin/wgcf generate
    chdir: /etc/wireguard
    creates: "{{ wgcf_profile }}"
  when: warp_initial_check.failed

- name: Stat Wireguard config {{ wireguard_config }}
  ansible.builtin.stat:
    path: "{{ wireguard_config }}"
  register: wg_config_file
  when: warp_initial_check.failed

- name: Copy generated config to /etc/wireguard
  ansible.builtin.copy:
    src: /etc/wireguard/{{ wgcf_profile }}
    dest: "{{ wireguard_config }}"
    remote_src: true
    mode: "0600"
  when: warp_initial_check.failed and not wg_config_file.stat.exists

- name: Update Wireguard configuration - Set DNS & MTU
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  loop:
    - regex: ^DNS
      line: "#DNS = 1.1.1.1"
    - regex: ^MTU
      line: MTU = 1420
  when: warp_initial_check.failed

- name: Update Wireguard configuratoin - Delete defualt AllowedIPs
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    state: absent
    regexp: ^AllowedIPs = (0\.0\.0\.0|\:\:\/0)
  when: warp_initial_check.failed

- name: Make sure WARP is not running before fetching IPs
  ansible.builtin.systemd:
    state: stopped
    name: wg-quick@wg0
  when: warp_initial_check.failed

- name: Fetch Google and AWS Cloudfront IPs
  ansible.builtin.shell: |
    set -o pipefail
    GOOGLE_CIDRS=$(curl -s https://www.gstatic.com/ipranges/goog.json | jq -r '.prefixes[]  | {ipv4Prefix,ipv6Prefix} | join("")' | sed ':a;N;$!ba;s/\n/,/g')
    CLOUDFRONT_CIDRS=$(curl -s https://ip-ranges.amazonaws.com/ip-ranges.json | jq -r '.prefixes[] | select(.service | match("CLOUDFRONT")) | {ip_prefix} | join(",") ' | sed ':a;N;$!ba;s/\n/,/g')
    CLOUDFLARE_CIDRS=$({ curl -s https://www.cloudflare.com/ips-v4;echo; curl -s https://www.cloudflare.com/ips-v6; } | grep -v 162.158.0.0 | sed ':a;N;$!ba;s/\n/,/g')
    AKAMAI_CIDRS=$( curl -s https://raw.githubusercontent.com/SecOps-Institute/Akamai-ASN-and-IPs-List/refs/heads/master/akamai_ip_cidr_blocks.lst | sed ':a;N;$!ba;s/\n/,/g')
    cat <<-EOF
    PersistentKeepalive = 5

    # Google
    AllowedIPS = ${GOOGLE_CIDRS}

    # AWS CloudFront
    AllowedIPS = ${CLOUDFRONT_CIDRS}

    # CLOUDFLARE
    AllowedIPS = ${CLOUDFLARE_CIDRS}

    # AKAMAI
    AllowedIPS = ${AKAMAI_CIDRS}
    
    # Telegram
    AllowedIPS = 91.108.20.0/23,91.108.20.0/22,91.108.12.0/22,149.154.172.0/22,149.154.168.0/22,91.108.56.0/23,91.108.16.0/22,149.154.160.0/22,149.154.162.0/23,91.108.4.0/22,91.108.8.0/22,95.161.64.0/20,149.154.164.0/22,149.154.164.0/23,91.108.56.0/22,149.154.166.0/23,149.154.160.0/23,185.76.151.0/24,91.105.192.0/23,2001:b28:f23c::/48,2001:b28:f23d::/48,2001:b28:f23f::/48,2001:67c:4e8::/48,2a0a:f280:203::/48

    # Meta
    AllowedIPS = 102.132.100.0/24,102.132.101.0/24,102.132.103.0/24,102.132.104.0/24,102.132.96.0/20,102.132.96.0/24,102.132.97.0/24,102.132.99.0/24,103.4.96.0/22,129.134.0.0/17,129.134.25.0/24,129.134.26.0/24,129.134.27.0/24,129.134.28.0/24,129.134.29.0/24,129.134.30.0/23,129.134.30.0/24,129.134.31.0/24,157.240.0.0/17,157.240.0.0/24,157.240.1.0/24,157.240.11.0/24,157.240.12.0/24,157.240.13.0/24,157.240.14.0/24,157.240.15.0/24,157.240.16.0/24,157.240.17.0/24,157.240.19.0/24,157.240.192.0/18,157.240.192.0/24,157.240.195.0/24,157.240.196.0/24,157.240.197.0/24,157.240.198.0/24,157.240.199.0/24,157.240.200.0/24,157.240.201.0/24,157.240.202.0/24,157.240.203.0/24,157.240.204.0/24,157.240.205.0/24,157.240.207.0/24,157.240.208.0/24,157.240.209.0/24,157.240.210.0/24,157.240.211.0/24,157.240.212.0/24,157.240.214.0/24,157.240.215.0/24,157.240.216.0/24,157.240.217.0/24,157.240.218.0/24,157.240.22.0/24,157.240.221.0/24,157.240.222.0/24,157.240.223.0/24,157.240.224.0/24,157.240.225.0/24,157.240.226.0/24,157.240.227.0/24,157.240.229.0/24,157.240.23.0/24,157.240.231.0/24,157.240.233.0/24,157.240.234.0/24,157.240.235.0/24,157.240.236.0/24,157.240.237.0/24,157.240.238.0/24,157.240.239.0/24,157.240.24.0/24,157.240.241.0/24,157.240.242.0/24,157.240.243.0/24,157.240.244.0/24,157.240.245.0/24,157.240.247.0/24,157.240.249.0/24,157.240.25.0/24,157.240.251.0/24,157.240.252.0/24,157.240.253.0/24,157.240.254.0/24,157.240.26.0/24,157.240.27.0/24,157.240.28.0/24,157.240.29.0/24,157.240.30.0/24,157.240.3.0/24,157.240.31.0/24,157.240.5.0/24,157.240.6.0/24,157.240.7.0/24,157.240.8.0/24,157.240.9.0/24,163.70.128.0/17,163.70.128.0/24,163.70.129.0/24,163.70.130.0/24,2620:0:1c00::/40,2a03:2880:1000::/36,2a03:2880:2000::/36,2a03:2880:3000::/36,2a03:2880::/32,2a03:2880::/36,2a03:2880:f001::/48,2a03:2880:f003::/48,2a03:2880:f004::/48,2a03:2880:f005::/48,2a03:2880:f007::/48,2a03:2880:f008::/48,2a03:2880:f00a::/48,2a03:2880:f00c::/48,2a03:2880:f00d::/48,2a03:2880:f00e::/48,2a03:2880:f00f::/48,2a03:2880:f010::/48,2a03:2880:f011::/48,2a03:2880:f012::/48,2a03:2880:f013::/48,2a03:2880:f016::/48,2a03:2880:f017::/48,2a03:2880:f019::/48,2a03:2880:f01c::/48,2a03:2880:f01d::/48,2a03:2880:f021::/48,2a03:2880:f023::/48,2a03:2880:f024::/48,2a03:2880:f028::/48,2a03:2880:f02b::/48,2a03:2880:f02c::/48,2a03:2880:f02f::/48,2a03:2880:f031::/48,2a03:2880:f032::/48,2a03:2880:f034::/48,2a03:2880:f035::/48,2a03:2880:f036::/48,2a03:2880:f037::/48,2a03:2880:f038::/48,2a03:2880:f03a::/48,2a03:2880:f03d::/48,2a03:2880:f03e::/48,2a03:2880:f03f::/48,2a03:2880:f041::/48,2a03:2880:f042::/48,2a03:2880:f043::/48,2a03:2880:f044::/48,2a03:2880:f045::/48,2a03:2880:f047::/48,2a03:2880:f048::/48,2a03:2880:f04a::/48,2a03:2880:f04c::/48,2a03:2880:f04d::/48,2a03:2880:f04e::/48,2a03:2880:f050::/48,2a03:2880:f052::/48,2a03:2880:f053::/48,2a03:2880:f056::/48,2a03:2880:f057::/48,2a03:2880:f058::/48,2a03:2880:f059::/48,2a03:2880:f05a::/48,2a03:2880:f05b::/48,2a03:2880:f05c::/48,2a03:2880:f05e::/48,2a03:2880:f060::/48,2a03:2880:f061::/48,2a03:2880:f065::/48,2a03:2880:f066::/48,2a03:2880:f068::/48,2a03:2880:f06a::/48,2a03:2880:f06b::/48,2a03:2880:f06f::/48,2a03:2880:f070::/48,2a03:2880:f071::/48,2a03:2880:f074::/48,2a03:2880:f076::/48,2a03:2880:f077::/48,2a03:2880:f078::/48,2a03:2880:f07d::/48,2a03:2880:f07e::/48,2a03:2880:f080::/48,2a03:2880:f082::/48,2a03:2880:f083::/48,2a03:2880:f084::/48,2a03:2880:f085::/48,2a03:2880:f086::/48,2a03:2880:f08a::/48,2a03:2880:f08e::/48,2a03:2880:f091::/48,2a03:2880:f096::/48,2a03:2880:f097::/48,2a03:2880:f098::/48,2a03:2880:f099::/48,2a03:2880:f09d::/48,2a03:2880:f09e::/48,2a03:2880:f0a2::/48,2a03:2880:f0a3::/48,2a03:2880:f0a4::/48

    EOF

  args:
    executable: /bin/bash
  register: allowedips
  when: warp_initial_check.failed

- name: Update Wireguard configuration - Add Google and AWS Cloudfront AllowedIPS
  ansible.builtin.blockinfile:
    path: "{{ wireguard_config }}"
    block: "{{ allowedips.stdout }}"
  when: warp_initial_check.failed

- name: Start and Enable WARP (IPv4-IPv6)
  ansible.builtin.systemd:
    name: wg-quick@wg0
    state: restarted
    enabled: true
  when: warp_initial_check.failed

- name: Ensure WARP has been activated successfully (IPv4-IPv6)
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: ipinfo_ipv4ipv6_result
  # failed_when: true
  failed_when: "'cloudflare' not in ipinfo_ipv4ipv6_result.content|lower"
  ignore_errors: true
  when: warp_initial_check.failed

- name: Update Wireguard configuratoin (IPv4-only)
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    state: absent
    regexp: ^Address = .*\/128$
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Update Wireguard configuratoin - Delete IPv6 AllowdIPS (IPv4-only)
  ansible.builtin.replace:
    path: "{{ wireguard_config }}"
    regexp: ',([a-fA-F0-9]{0,4}:){1,7}([a-fA-F0-9]{1,4})?\/[0-9]{1,3}'
    replace: ""
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Start and Enable WARP (IPv4-only)
  ansible.builtin.systemd:
    name: wg-quick@wg0
    state: restarted
    enabled: true
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Ensure WARP has been activated successfully (IPv4-only)
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: ipinfo_ipv4_result
  failed_when: "'cloudflare' not in ipinfo_ipv4_result.content|lower"
  ignore_errors: true
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Stop and Disable WARP if both IPv4-only and IPv4-IPv6 checks failed
  ansible.builtin.systemd:
    state: stopped
    name: wg-quick@wg0
    enabled: false
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed and ipinfo_ipv4_result.failed
