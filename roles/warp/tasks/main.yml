---
- name: Check if WARP has been already activated
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: warp_initial_check
  failed_when: "'cloudflare' not in warp_initial_check.content|lower"
  ignore_errors: true

- name: Install Wireguard
  become: true
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - wireguard
    - iptables
    # - resolvconf
    - jq
  when: warp_initial_check.failed

- name: Ensure /etc/wireguard directory exists
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: "0755"
  when: warp_initial_check.failed

- name: Get latest wgcf release from GitHub API
  ansible.builtin.uri:
    url: https://api.github.com/repos/ViRb3/wgcf/releases/latest
    return_content: true
  register: wgcf_latest_release
  when: warp_initial_check.failed

- name: Extract wgcf download url
  ansible.builtin.set_fact:
    wgcf_download_url: "{{ wgcf_latest_release.content | from_json | json_query(query) | first }}"
  vars:
    query: assets[?contains(name,'linux_amd64')].browser_download_url
  when: warp_initial_check.failed

- name: Download and install latest wgcf release
  ansible.builtin.get_url:
    url: "{{ wgcf_download_url }}"
    dest: /usr/bin/wgcf
    mode: a+x
    force: true
  when: warp_initial_check.failed

- name: Register with WARP
  ansible.builtin.command:
    cmd: /usr/bin/wgcf register --accept-tos
    chdir: /etc/wireguard
    creates: "{{ wgcf_account }}"
  when: warp_initial_check.failed

- name: Generate Wireguard config
  ansible.builtin.command:
    cmd: /usr/bin/wgcf generate
    chdir: /etc/wireguard
    creates: "{{ wgcf_profile }}"
  when: warp_initial_check.failed

- name: Stat Wireguard config {{ wireguard_config }}
  ansible.builtin.stat:
    path: "{{ wireguard_config }}"
  register: wg_config_file
  when: warp_initial_check.failed

- name: Copy generated config to /etc/wireguard
  ansible.builtin.copy:
    src: /etc/wireguard/{{ wgcf_profile }}
    dest: "{{ wireguard_config }}"
    remote_src: true
    mode: "0600"
  when: warp_initial_check.failed and not wg_config_file.stat.exists

- name: Update Wireguard configuration - Set DNS & MTU
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  loop:
    - regex: ^DNS
      line: "#DNS = 1.1.1.1"
    - regex: ^MTU
      line: MTU = 1420
  when: warp_initial_check.failed

- name: Update Wireguard configuratoin - Delete defualt AllowedIPs
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    state: absent
    regexp: ^AllowedIPs = (0\.0\.0\.0|\:\:\/0)
  when: warp_initial_check.failed

- name: Make sure WARP is not running before fetching IPs
  ansible.builtin.systemd:
    state: stopped
    name: wg-quick@wg0
  when: warp_initial_check.failed

- name: Fetch Google and AWS Cloudfront IPs
  ansible.builtin.shell: |
    set -o pipefail
    GOOGLE_CIDRS=$(curl -s https://www.gstatic.com/ipranges/goog.json | jq -r '.prefixes[]  | {ipv4Prefix,ipv6Prefix} | join("")' | sed ':a;N;$!ba;s/\n/,/g')
    CLOUDFRONT_CIDRS=$(curl -s https://ip-ranges.amazonaws.com/ip-ranges.json | jq -r '.prefixes[] | select(.service | match("CLOUDFRONT")) | {ip_prefix} | join(",") ' | sed ':a;N;$!ba;s/\n/,/g')
    CLOUDFLARE_CIDRS=$({ curl -s https://www.cloudflare.com/ips-v4;echo; curl -s https://www.cloudflare.com/ips-v6; } | grep -v 162.158.0.0 | sed ':a;N;$!ba;s/\n/,/g')
    cat <<-EOF
    PersistentKeepalive = 5

    # Google
    AllowedIPS = ${GOOGLE_CIDRS}

    # AWS CloudFront
    AllowedIPS = ${CLOUDFRONT_CIDRS}

    # CLOUDFLARE (COMMENTED BY DEFAULT)
    AllowedIPS = ${CLOUDFLARE_CIDRS}
    EOF
  args:
    executable: /bin/bash
  register: allowedips
  when: warp_initial_check.failed

- name: Update Wireguard configuration - Add Google and AWS Cloudfront AllowedIPS
  ansible.builtin.blockinfile:
    path: "{{ wireguard_config }}"
    block: "{{ allowedips.stdout }}"
  when: warp_initial_check.failed

- name: Start and Enable WARP (IPv4-IPv6)
  ansible.builtin.systemd:
    name: wg-quick@wg0
    state: restarted
    enabled: true
  when: warp_initial_check.failed

- name: Ensure WARP has been activated successfully (IPv4-IPv6)
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: ipinfo_ipv4ipv6_result
  # failed_when: true
  failed_when: "'cloudflare' not in ipinfo_ipv4ipv6_result.content|lower"
  ignore_errors: true
  when: warp_initial_check.failed

- name: Update Wireguard configuratoin (IPv4-only)
  ansible.builtin.lineinfile:
    path: "{{ wireguard_config }}"
    state: absent
    regexp: ^Address = .*\/128$
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Update Wireguard configuratoin - Delete IPv6 AllowdIPS (IPv4-only)
  ansible.builtin.replace:
    path: "{{ wireguard_config }}"
    regexp: ',([a-fA-F0-9]{0,4}:){1,7}([a-fA-F0-9]{1,4})?\/[0-9]{1,3}'
    replace: ""
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Start and Enable WARP (IPv4-only)
  ansible.builtin.systemd:
    name: wg-quick@wg0
    state: restarted
    enabled: true
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Ensure WARP has been activated successfully (IPv4-only)
  ansible.builtin.uri:
    url: https://ipinfo.io
    timeout: 4
    http_agent: curl
    return_content: true
  register: ipinfo_ipv4_result
  failed_when: "'cloudflare' not in ipinfo_ipv4_result.content|lower"
  ignore_errors: true
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed

- name: Stop and Disable WARP if both IPv4-only and IPv4-IPv6 checks failed
  ansible.builtin.systemd:
    state: stopped
    name: wg-quick@wg0
    enabled: false
  when: warp_initial_check.failed and ipinfo_ipv4ipv6_result.failed and ipinfo_ipv4_result.failed
