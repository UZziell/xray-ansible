---
- name: Install docker daemon
  ansible.builtin.include_role:
    name: geerlingguy.docker
  vars:
    docker_install_compose_plugin: false
    # docker_compose_package: docker-compose-plugin
    # docker_compose_package_state: present

- name: Ensure python3 pip module is installed
  ansible.builtin.include_role:
    name: pip

- name: Ensure docker and docker-compose python modules are installed
  ansible.builtin.pip:
    name:
      - docker
      - docker-compose
      - pyopenssl

- name: Allow connections on ports 80,443,444
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_ports:
      - 80
      - 443
      - 444
    jump: ACCEPT

- name: Log into DockerHub
  community.docker.docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
  ignore_errors: true

- name: Add A record to Cloudflare
  ansible.builtin.include_role:
    name: cloudflare
  vars:
    records:
      - cloudflare_domain: "{{ xui_domain }}"
        cloudflare_subdomain: "{{ xui_subdomain }}"

- name: Ensure x-ui data directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ xui_data_dir }}/certs"
    - "{{ xui_data_dir }}/db"
    - "{{ xui_project_dir }}/html"

- name: Get certificate via certbot for {{ xray_subdomain }}.{{ xray_domain }}
  ansible.builtin.include_role:
    name: geerlingguy.certbot
  vars:
    certbot_certs:
      - domains:
          - "{{ xray_subdomain }}.{{ xray_domain }}"
  when: get_real_certificate_with_certbot

- name: Copy '{{ xray_subdomain }}.{{ xray_domain }}' certificate to {{ xui_data_dir }}
  ansible.builtin.copy:
    src: "/etc/letsencrypt/live/{{ xray_subdomain }}.{{ xray_domain }}/{{ item }}"
    dest: "{{ xui_data_dir }}/certs/{{ item }}"
    mode: "0644"
    remote_src: true
  loop:
    - fullchain.pem
    - privkey.pem
  when: get_real_certificate_with_certbot

- name: Copy local x-ui.db to remote
  ansible.builtin.copy:
    src: files/x-ui.db
    dest: "{{ xui_data_dir }}/db/"
    mode: "0644"
  when: "{{ lookup('ansible.builtin.fileglob', 'files/x-ui.db') != [] }}"

- name: Generate fake certificates
  ansible.builtin.include_tasks: generate_selfsigned_certificate.yml
  vars:
    selfsigned_certificate_common_name: "{{ item }}"
  loop:
    - "{{ xui_fake_domain }}"
#     - "{{ xui_fake_ip }}"
#     - www.debian.org
#     - "{{ xray_subdomain }}.{{ xray_domain }}" # To Delete (fake panel certificate)

- name: Generate fake certificate for panel
  ansible.builtin.include_tasks: generate_selfsigned_certificate.yml
  vars:
    selfsigned_certificate_common_name: "{{ xray_subdomain }}.{{ xray_domain }}"
  when: not get_real_certificate_with_certbot

# fake certificate for panel
- name: Copy fake panel certificate '{{ xray_subdomain }}.{{ xray_domain }}' to {{ xui_data_dir }}
  ansible.builtin.copy:
    src: "{{ xui_data_dir }}/certs/{{ xray_subdomain }}.{{ xray_domain }}/{{ item }}"
    dest: "{{ xui_data_dir }}/certs/{{ item }}"
    mode: "0644"
    remote_src: true
  loop:
    - fullchain.pem
    - privkey.pem
  when: not get_real_certificate_with_certbot

- name: Install project files
  ansible.builtin.template:
    src: "{{ item.src }}.j2"
    dest: "{{ xui_project_dir }}/{{ item.src }}"
    owner: root
    group: root
    mode: "{{ item.mode | default('0600') }}"
  loop:
    - src: docker-compose.yaml
    # - src: env
    - src: nginx.conf
      mode: "0644"

- name: Copy decoy website to project dir `{{ xui_project_dir }}`
  ansible.builtin.copy:
    src: files/decoy.html
    dest: "{{ xui_project_dir }}/html/index.html"
    mode: "0644"

- name: Create download files
  community.general.filesize:
    path: "{{ xui_project_dir }}/html/{{ item }}mb"
    size: "{{ item }}m"
  loop:
    - 10
    - 20

- name: Ensure compose services are present
  community.docker.docker_compose:
    project_src: "{{ xui_project_dir }}"
    pull: true
    state: present

- name: Configure Panel
  ansible.builtin.command: docker compose --project-directory {{ xui_project_dir }} exec xui /app/x-ui setting -username {{ xui_sudo_username }} -password {{ xui_sudo_password }} -port {{ xui_port }} -enabletgbot -tgbotchatid {{ telegram_admin_id }} -tgbottoken {{ telegram_api_token }}
  when: "{{ lookup('ansible.builtin.fileglob', 'files/x-ui.db') == [] }}"

- name: Create and start xui service
  community.docker.docker_compose:
    project_src: "{{ xui_project_dir }}"
    services:
      - xui
    restarted: true

- name: Debug panel info
  ansible.builtin.debug:
    msg: |
      Panel URL: https://{{ xui_subdomain }}.{{ xui_domain }}:{{ xui_port }}
      sudo_user: {{ xui_sudo_username }}
      sudo_password: {{ xui_sudo_password }}

- name: Send notification in manager node
  become_user: "{{ ansible_env.USER }}"
  local_action: shell /usr/bin/firefox-developer-edition https://{{ xui_subdomain }}.{{ xui_domain }}:{{ xui_port }}/; /usr/bin/notify-send 'Playbook finished!!!!!!!';
  ignore_errors: true
