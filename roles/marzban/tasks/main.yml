---
- name: Add A record to Cloudflare
  community.general.cloudflare_dns:
    account_email: "{{ cloudflare_email }}"
    account_api_key: "{{ cloudflare_api_key }}"
    zone: "{{ marzban_domain }}"
    name: "{{ marzban_subdomain }}"
    type: A
    value: "{{ ansible_host }}"
    state: present

- name: Install pip3
  ansible.builtin.include_role:
    name: packages
  vars:
    pkgs_list:
      - python3-pip

- name: Ensure docker and docker-compose modules are installed
  ansible.builtin.pip:
    name:
      - docker
      - docker-compose

# - name: Clone marzban master branch
#   ansible.builtin.git:
#     repo: https://github.com/Gozargah/Marzban-examples
#     dest: "{{ marzban_project_dir }}"
#     single_branch: true
#     version: master
#     update: true
#     force: true

- name: Ensure marzban dir exists {{ marzban_project_dir }}
  ansible.builtin.file:
    path: "{{ marzban_project_dir }}"
    state: directory
    mode: "0755"

- name: Install project files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ marzban_project_dir }}/{{ item.dest }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - src: docker-compose.yaml.j2
      dest: docker-compose.yaml
    - src: env.j2
      dest: env
    - src: xray_config.json.j2
      dest: xray_config.json
    - src: nginx.conf.j2
      dest: nginx.conf

- name: Ensure marzban data directory exists {{ marzban_data_dir }}/certs
  ansible.builtin.file:
    path: "{{ marzban_data_dir }}/certs"
    state: directory
    mode: "0755"

- name: Generate EC key
  community.crypto.openssl_privatekey:
    path: "{{ marzban_certificate_key_path }}"
    # size: 256
    # type: ECC
    # curv: secp256k1

- name: Create certificate signing request (CSR) for self-signed certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ marzban_certificate_key_path }}"
    common_name: "{{ marzban_fake_domain }}"
    organization_name: Kawabanga, Inc.
    subject_alt_name:
      - "DNS:{{ marzban_fake_domain }}"
      - "DNS:www.{{ marzban_fake_domain }}"
      - "DNS:api.{{ marzban_fake_domain }}"
  register: csr

- name: Create self-signed certificate from CSR
  community.crypto.x509_certificate:
    path: "{{ marzban_certificate_path }}"
    csr_content: "{{ csr.csr }}"
    privatekey_path: "{{ marzban_certificate_key_path }}"
    provider: selfsigned

# - name: Configure marzban xray.json
#   ansible.builtin.replace:
#     path: "{{ marzban_project_dir }}/{{ marzban_config_mode }}/xray_config.json"
#     regexp: "{{ item.regexp }}"
#     replace: "{{ item.replace }}"
#   loop:
#     - regexp: "//"
#       replace: ""
#     - regexp: SERVER_NAME
#       replace: "{{ marzban_subdomain }}.{{ marzban_domain }}"

# - name: Configure marzban env file
#   ansible.builtin.blockinfile:
#     path: "{{ marzban_project_dir }}/{{ marzban_config_mode }}/env"
#     create: true
#     mode: "0644"
#     block: |
#       SUDO_USERNAME = "admin"
#       SUDO_PASSWORD = "{{ marzban_sudo_password }}"

#       XRAY_SUBSCRIPTION_URL_PREFIX = "https://{{ marzban_subdomain }}.{{ marzban_domain }}"

#       UVICORN_PORT = {{ marzban_panel_port }}
#       UVICORN_SSL_CERTFILE = "{{ marzban_certificate_path }}"
#       UVICORN_SSL_KEYFILE = "{{ marzban_certificate_key_path }}"

#       TELEGRAM_API_TOKEN = "{{ telegram_api_token }}"
#       TELEGRAM_ADMIN_ID = "{{ telegram_admin_id }}"

- name: Tear down existing compose services
  community.docker.docker_compose:
    project_src: "{{ marzban_project_dir }}"
    state: absent

- name: Create and start compose services
  community.docker.docker_compose:
    project_src: "{{ marzban_project_dir }}"
  register: compose_output

- debug:
    msg: |
      Panel URL: https://{{ marzban_subdomain }}.{{ marzban_domain }}:{{ marzban_panel_port }}
      sudo_password: {{ marzban_sudo_password }}
